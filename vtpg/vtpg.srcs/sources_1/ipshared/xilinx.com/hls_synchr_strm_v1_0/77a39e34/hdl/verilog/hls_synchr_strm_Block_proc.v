// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_synchr_strm_Block_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_sig,
        src_V_V_TDATA,
        src_V_V_TVALID,
        src_V_V_TREADY,
        dst_V_V_TDATA,
        dst_V_V_TVALID,
        dst_V_V_TREADY,
        start_sigo,
        start_sigo_ap_vld
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] start_sig;
input  [63:0] src_V_V_TDATA;
input   src_V_V_TVALID;
output   src_V_V_TREADY;
output  [63:0] dst_V_V_TDATA;
output   dst_V_V_TVALID;
input   dst_V_V_TREADY;
output  [0:0] start_sigo;
output   start_sigo_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_V_V_TREADY;
reg dst_V_V_TVALID;
reg[0:0] start_sigo;
reg start_sigo_ap_vld;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
reg   [0:0] counter = 1'b0;
reg   [0:0] start_ip = 1'b0;
reg    ap_sig_bdd_45;
wire   [0:0] tmp_1_fu_68_p2;
wire   [0:0] start_ip_load_load_fu_86_p1;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_61;
reg    ap_sig_ioackin_dst_V_V_TREADY;
reg    ap_reg_ioackin_dst_V_V_TREADY = 1'b0;
reg   [0:0] start_sigo_preg = 1'b0;
wire   [0:0] tmp_fu_62_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_sig_bdd_104;
reg    ap_sig_bdd_103;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~((src_V_V_TVALID == ap_const_logic_0) | (~(ap_const_lv1_0 == start_ip_load_load_fu_86_p1) & (ap_const_logic_0 == ap_sig_ioackin_dst_V_V_TREADY))))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ioackin_dst_V_V_TREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_dst_V_V_TREADY
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_dst_V_V_TREADY <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_103) begin
            if (~((src_V_V_TVALID == ap_const_logic_0) | (~(ap_const_lv1_0 == start_ip_load_load_fu_86_p1) & (ap_const_logic_0 == ap_sig_ioackin_dst_V_V_TREADY)))) begin
                ap_reg_ioackin_dst_V_V_TREADY <= ap_const_logic_0;
            end else if (ap_sig_bdd_104) begin
                ap_reg_ioackin_dst_V_V_TREADY <= ap_const_logic_1;
            end
        end
    end
end

/// start_sigo_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_start_sigo_preg
    if (ap_rst == 1'b1) begin
        start_sigo_preg <= ap_const_lv1_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(src_V_V_TVALID == ap_const_logic_0))) begin
            start_sigo_preg <= start_sig;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_45 & ~(ap_const_lv1_0 == tmp_1_fu_68_p2))) begin
        counter <= ap_const_lv1_1;
        start_ip <= ap_const_lv1_1;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or src_V_V_TVALID or start_ip_load_load_fu_86_p1 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_ioackin_dst_V_V_TREADY)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~((src_V_V_TVALID == ap_const_logic_0) | (~(ap_const_lv1_0 == start_ip_load_load_fu_86_p1) & (ap_const_logic_0 == ap_sig_ioackin_dst_V_V_TREADY)))))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (src_V_V_TVALID or start_ip_load_load_fu_86_p1 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_ioackin_dst_V_V_TREADY)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~((src_V_V_TVALID == ap_const_logic_0) | (~(ap_const_lv1_0 == start_ip_load_load_fu_86_p1) & (ap_const_logic_0 == ap_sig_ioackin_dst_V_V_TREADY))))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21)
begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_61)
begin
    if (ap_sig_bdd_61) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_dst_V_V_TREADY assign process. ///
always @ (dst_V_V_TREADY or ap_reg_ioackin_dst_V_V_TREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_dst_V_V_TREADY)) begin
        ap_sig_ioackin_dst_V_V_TREADY = dst_V_V_TREADY;
    end else begin
        ap_sig_ioackin_dst_V_V_TREADY = ap_const_logic_1;
    end
end

/// dst_V_V_TVALID assign process. ///
always @ (src_V_V_TVALID or start_ip_load_load_fu_86_p1 or ap_sig_cseq_ST_st2_fsm_1 or ap_reg_ioackin_dst_V_V_TREADY)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == start_ip_load_load_fu_86_p1) & ~(src_V_V_TVALID == ap_const_logic_0) & (ap_const_logic_0 == ap_reg_ioackin_dst_V_V_TREADY))) begin
        dst_V_V_TVALID = ap_const_logic_1;
    end else begin
        dst_V_V_TVALID = ap_const_logic_0;
    end
end

/// src_V_V_TREADY assign process. ///
always @ (src_V_V_TVALID or start_ip_load_load_fu_86_p1 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_ioackin_dst_V_V_TREADY)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~((src_V_V_TVALID == ap_const_logic_0) | (~(ap_const_lv1_0 == start_ip_load_load_fu_86_p1) & (ap_const_logic_0 == ap_sig_ioackin_dst_V_V_TREADY))))) begin
        src_V_V_TREADY = ap_const_logic_1;
    end else begin
        src_V_V_TREADY = ap_const_logic_0;
    end
end

/// start_sigo assign process. ///
always @ (start_sig or src_V_V_TVALID or ap_sig_cseq_ST_st2_fsm_1 or start_sigo_preg)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(src_V_V_TVALID == ap_const_logic_0))) begin
        start_sigo = start_sig;
    end else begin
        start_sigo = start_sigo_preg;
    end
end

/// start_sigo_ap_vld assign process. ///
always @ (src_V_V_TVALID or ap_sig_cseq_ST_st2_fsm_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(src_V_V_TVALID == ap_const_logic_0))) begin
        start_sigo_ap_vld = ap_const_logic_1;
    end else begin
        start_sigo_ap_vld = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or src_V_V_TVALID or ap_sig_bdd_45 or start_ip_load_load_fu_86_p1 or ap_sig_ioackin_dst_V_V_TREADY)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_45) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~((src_V_V_TVALID == ap_const_logic_0) | (~(ap_const_lv1_0 == start_ip_load_load_fu_86_p1) & (ap_const_logic_0 == ap_sig_ioackin_dst_V_V_TREADY)))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_103 assign process. ///
always @ (start_ip_load_load_fu_86_p1 or ap_sig_cseq_ST_st2_fsm_1)
begin
    ap_sig_bdd_103 = ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == start_ip_load_load_fu_86_p1));
end

/// ap_sig_bdd_104 assign process. ///
always @ (src_V_V_TVALID or dst_V_V_TREADY)
begin
    ap_sig_bdd_104 = (~(src_V_V_TVALID == ap_const_logic_0) & (ap_const_logic_1 == dst_V_V_TREADY));
end

/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_45 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_45 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_61 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_61 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign dst_V_V_TDATA = src_V_V_TDATA;
assign start_ip_load_load_fu_86_p1 = start_ip;
assign tmp_1_fu_68_p2 = (start_sig & tmp_fu_62_p2);
assign tmp_fu_62_p2 = (counter ^ ap_const_lv1_1);


endmodule //hls_synchr_strm_Block_proc

